- name: Upgrade hosts
  tags: update, package
  hosts: linux
  become: true
  tasks:
    - name: Upgrade hosts with APT
      tags: apt, debian
      when: ansible_facts['os_family'] == 'Debian'
      ansible.builtin.apt:
        upgrade: safe
        autoremove: true
        autoclean: true
        install_recommends: true
        update_cache: true
        state: latest

    - name: Upgrade hosts with DNF
      tags: dnf, redhat
      when: ansible_facts['os_family'] == 'RedHat'
      ansible.builtin.dnf:
        name: '*'
        state: latest
        update_cache: true

    - name: Upgrade hosts with PACMAN
      tags: pacman, archlinux
      when: ansible_facts['os_family'] == 'Archlinux'
      community.general.pacman:
        upgrade: true
        update_cache: true

- name: Deploy web accessible password protected glances
  tags: glances, password, web
  hosts: linux
  become: true
  tasks:
    - name: Install requirements
      tags: install, package, python
      ansible.builtin.package:
        name: '{{ dependencies_pkg }}'
        state: present

    - name: Install glances as package
      tags: install, package
      when: ansible_facts['os_family'] == 'Archlinux' or ansible_facts['os_family'] == 'RedHat'
      ansible.builtin.package:
        name: '{{ glances_pkg }}'
        state: present

    - name: Install glances with pip
      tags: install, pip
      when: ansible_facts['os_family'] == 'Debian'
      ansible.builtin.pip:
        name: '{{ glances_pkg }}'
        state: present
        extra_args: --break-system-packages

    - name: Configure glances
      tags: configure
      ansible.builtin.copy:
        src: 'files/glances/glances.conf'
        dest: '{{ glances_conf_path }}'
        owner: root
        group: root
        mode: '0644'

    - name: Create service for glances
      tags: service
      ansible.builtin.copy:
        src: '{{ glances_service_src_path }}'
        dest: /etc/systemd/system/glances.service
        owner: root
        group: root
        mode: '0644'

    - name: Reload systemd daemon
      tags: systemd
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Start service
      tags: start, service
      ansible.builtin.service:
        name: 'glances'
        enabled: true
        state: restarted

- name: Install & Start web service
  tags: web
  hosts: linux
  become: true
  tasks:
    - name: Populate ansible facts with services
      tags: always, service_facts
      ansible.builtin.service_facts:

    - name: Open firewall ports with firewalld
      tags: firewalld, port
      when: "'firewalld.service' in ansible_facts.services"
      loop: '{{ firewall_ports }}'
      ansible.posix.firewalld:
        port: '{{ item }}'
        permanent: true
        immediate: true
        state: enabled

    - name: Install web server
      tags: install, package
      ansible.builtin.package:
        name: '{{ apache_pkg }}'
        state: present

    - name: Configure web server on Arch
      when: ansible_facts['os_family'] == 'Archlinux'
      tags: configure, web, service, arch
      block:
        - name: Add reverse proxy configuration
          tags: configure, service, glances, proxy
          ansible.builtin.copy:
            src: '{{ apache_glances_src_path }}'
            dest: '{{ apache_glances_conf_path }}'
            owner: root
            group: root
            mode: '0644'

        - name: Enable proxy module
          tags: configure, service, proxy, httpd
          ansible.builtin.lineinfile:
            path: '{{ apache_conf_path }}'
            regexp: '^#LoadModule proxy_module'
            line: 'LoadModule proxy_module modules/mod_proxy.so'

        - name: Enable proxy http module
          tags: configure, service, proxy, http, httpd
          ansible.builtin.lineinfile:
            path: '{{ apache_conf_path }}'
            regexp: '^#LoadModule proxy_http_module'
            line: 'LoadModule proxy_http_module modules/mod_proxy_http.so'

        - name: Update web server configuration
          tags: configure, service, proxy, httpd, arch
          when: ansible_facts['os_family'] == 'Archlinux'
          ansible.builtin.lineinfile:
            path: '{{ apache_conf_path }}'
            line: 'Include conf/glances.conf'

        - name: Allow HTTPD as reverse proxy in SELinux
          tags: redhat, seboolean, selinux, httpd, redhat
          when: ansible_facts['os_family'] == 'RedHat'
          ansible.posix.seboolean:
            name: httpd_can_network_connect
            state: true
            persistent: true

    - name: Configure web server on Debian
      when: ansible_facts['os_family'] == 'Debian'
      tags: configure, web, service, arch
      block:
        - name: Add reverse proxy configuration
          tags: configure, service, glances, proxy
          ansible.builtin.copy:
            src: '{{ apache_glances_src_path }}'
            dest: '{{ apache_glances_conf_path }}'
            owner: root
            group: root
            mode: '0644'

        - name: Enable proxy module
          tags: configure, service, proxy, httpd
          community.general.apache2_module:
            name: 'proxy'
            state: present

        - name: Enable proxy http module
          tags: configure, service, proxy, http, httpd
          community.general.apache2_module:
            name: 'proxy_http'
            state: present

    - name: Configure web server on RedHat
      when: ansible_facts['os_family'] == 'RedHat'
      tags: configure, web, service, arch
      block:
        - name: Add reverse proxy configuration
          tags: configure, service, glances, proxy
          ansible.builtin.copy:
            src: '{{ apache_glances_src_path }}'
            dest: '{{ apache_glances_conf_path }}'
            owner: root
            group: root
            mode: '0644'

        - name: Allow HTTPD as reverse proxy in SELinux
          tags: redhat, seboolean, selinux, httpd, redhat
          when: ansible_facts['os_family'] == 'RedHat'
          ansible.posix.seboolean:
            name: httpd_can_network_connect
            state: true
            persistent: true

    - name: Start web server
      tags: start, service
      ansible.builtin.service:
        name: '{{ apache_service }}'
        enabled: true
        state: restarted
